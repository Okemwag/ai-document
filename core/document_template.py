from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

def apply_organization_template(text: str, output_path: str) -> str:
    """
    Apply a professional organization template to the improved document
    """
    # Create a new Document
    doc = Document()
    
    # Set default font and size
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Calibri'
    font.size = Pt(11)
    
    # Add company header
    header = doc.sections[0].header
    header_paragraph = header.paragraphs[0]
    header_paragraph.text = "ADA AI Document Improver"
    header_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Style header
    header_run = header_paragraph.runs[0]
    header_run.bold = True
    header_run.font.size = Pt(14)
    header_run.font.color.rgb = RGBColor(0, 51, 102)  # Dark blue
    
    # Add title
    title = doc.add_paragraph()
    title_run = title.add_run("Improved Document")
    title_run.bold = True
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Add main content
    content = doc.add_paragraph(text)
    content.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
    
    # Add footer
    footer = doc.sections[0].footer
    footer_paragraph = footer.paragraphs[0]
    footer_paragraph.text = "Confidential | Generated by AI Document Improver"
    footer_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Style footer
    footer_run = footer_paragraph.runs[0]
    footer_run.italic = True
    footer_run.font.size = Pt(9)
    footer_run.font.color.rgb = RGBColor(128, 128, 128)  # Gray
    
    # Save the document
    doc.save(output_path)
    
    return output_path

def validate_template(template_path: str) -> bool:
    """
    Validate the organization's document template
    """
    try:
        doc = Document(template_path)
        # Add validation checks for template
        # Example checks:
        # - Check for required sections
        # - Verify styling
        # - Ensure formatting meets organization standards
        return True
    except Exception as e:
        return False