import tempfile
from pathlib import Path

from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Pt, RGBColor


class ExportResult:
    def __init__(self, filepath):
        self.filepath = filepath

    def __str__(self):
        return f"Exported file at: {self.filepath}"


class DocumentExporter:
    def __init__(self, version, template_path=None, text_content=None, output_format='docx', include_comments=False):
        self.version = version
        self.template_path = template_path
        self.text_content = text_content
        self.output_format = output_format
        self.include_comments = include_comments

    def _apply_template_style(self, text, output_path):
        doc = Document()

        style = doc.styles['Normal']
        font = style.font
        font.name = 'Calibri'
        font.size = Pt(11)

        header = doc.sections[0].header
        header_paragraph = header.paragraphs[0]
        header_paragraph.text = "ADA AI Document Improver"
        header_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        header_run = header_paragraph.runs[0]
        header_run.bold = True
        header_run.font.size = Pt(14)
        header_run.font.color.rgb = RGBColor(0, 51, 102)

        title = doc.add_paragraph()
        title_run = title.add_run("Improved Document")
        title_run.bold = True
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        title.space_after = Pt(12)

        for para in text.split('\n'):
            if para.strip():
                p = doc.add_paragraph(para.strip())
                p.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY

        footer = doc.sections[0].footer
        footer_paragraph = footer.paragraphs[0]
        footer_paragraph.text = "Confidential | Generated by AI Document Improver"
        footer_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        footer_run = footer_paragraph.runs[0]
        footer_run.italic = True
        footer_run.font.size = Pt(9)
        footer_run.font.color.rgb = RGBColor(128, 128, 128)

        doc.save(output_path)

    def _populate_template(self, doc):
        data = {
            'title': f"Exported Document v{self.version}",
            'author': 'Document Export System',
            'body': 'This is the body content of the document.'
        }

        for paragraph in doc.paragraphs:
            for key, value in data.items():
                if f"{{{{{key}}}}}" in paragraph.text:
                    paragraph.text = paragraph.text.replace(f"{{{{{key}}}}}", value)

    def generate(self):
        output = tempfile.NamedTemporaryFile(delete=False, suffix=f".{self.output_format}")

        if self.text_content:
            self._apply_template_style(self.text_content, output.name)
        elif self.template_path:
            doc = Document(self.template_path)
            self._populate_template(doc)
            doc.save(output.name)
        else:
            raise ValueError("Either template_path or text_content must be provided.")

        return ExportResult(output.name)
